// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String  @id @default(uuid())
  name            String
  email           String
  password        String
  profilePhotoKey String?
  isVerified      Boolean @default(false)

  theme  UserTheme @default(LIGHT)
  status RowStatus @default(ACTIVED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User Profile 
  userPhones       UserPhones[]
  verificationCode VerificationCodes?
  notifications    Notifications[]

  // Community
  posts                Posts[]
  postSaves            PostSaves[]
  communityNotes       CommunityNotes[]
  communityNoteRatings CommunityNoteRatings[]

  caregiver   Caregiver?
  selfMonitor SelfMonitor?

  @@map("users")
}

model Caregiver {
  id     String @id @default(uuid())
  code   String @unique
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])

  selfMonitors SelfMonitor[]

  @@map("caregivers")
}

model SelfMonitor {
  id          String  @id @default(uuid())
  caregiverId String?
  userId      String  @unique
  logInputs   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  caregiver Caregiver? @relation(fields: [caregiverId], references: [id])
  user      Users      @relation(fields: [userId], references: [id])

  medicalRecord  MedicalRecord?
  medicalLogs    MedicalLogs[]
  reports        MedicalReports[]
  medicineAlarms MedicineAlarms[]
  aiChats        AiChats[]

  @@map("self_monitors")
}

model UserPhones {
  token  String @unique
  userId String

  user Users @relation(fields: [userId], references: [id])

  @@map("user_phones")
}

model VerificationCodes {
  id        String   @id @default(uuid())
  code      String
  expiresAt DateTime

  type VerificationCodeType

  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])

  @@map("verification_codes")
}

model Notifications {
  id     String  @id @default(uuid())
  title  String
  body   String
  path   String?
  isRead Boolean @default(false)

  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Forums {
  id       String  @id @default(uuid())
  name     String
  imageKey String?

  status RowStatus @default(ACTIVED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Posts[]

  @@map("forums")
}

model Posts {
  id   String @id @default(uuid())
  body String

  status RowStatus @default(ACTIVED)

  userId   String
  parentId String?
  forumId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users   @relation(fields: [userId], references: [id])
  parent Posts?  @relation("Parent", fields: [parentId], references: [id])
  forum  Forums? @relation(fields: [forumId], references: [id])

  childPosts Posts[]          @relation("Parent")
  saves      PostSaves[]
  notes      CommunityNotes[]

  @@map("posts")
}

model PostSaves {
  userId String
  postId String

  user Users @relation(fields: [userId], references: [id])
  post Posts @relation(fields: [postId], references: [id])

  @@id([userId, postId])
  @@map("post_saves")
}

model CommunityNotes {
  id    String @id @default(uuid())
  cause String

  status RowStatus @default(ACTIVED)

  userId String
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])
  post Posts @relation(fields: [postId], references: [id])

  ratings CommunityNoteRatings[]

  @@map("community_notes")
}

model CommunityNoteRatings {
  userId String
  noteId String

  rating CommunityNoteRating

  user Users          @relation(fields: [userId], references: [id])
  note CommunityNotes @relation(fields: [noteId], references: [id])

  @@id([userId, noteId])
  @@map("community_note_ratings")
}

model MedicalRecord {
  id        String    @id @default(uuid())
  bloodType BloodType

  selfMonitorId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  selfMonitor SelfMonitor @relation(fields: [selfMonitorId], references: [id])

  allergies       MedicalRecordToAllergies[]
  chronicDiseases MedicalRecordToChronicDiseases[]

  @@map("medical_record")
}

model Allergies {
  id   String      @id @default(uuid())
  name String
  type AllergyType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medicalRecords MedicalRecordToAllergies[]

  @@map("allergies")
}

model MedicalRecordToAllergies {
  medicalRecordId String
  allergyId       String
  description     String?

  medicalRecord MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  allergy       Allergies     @relation(fields: [allergyId], references: [id])

  @@id([medicalRecordId, allergyId])
  @@map("medical_record_to_allergies")
}

model ChronicDiseases {
  id          String  @id @default(uuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medicalRecords MedicalRecordToChronicDiseases[]

  @@map("chronic_diseases")
}

model MedicalRecordToChronicDiseases {
  medicalRecordId  String
  chronicDiseaseId String

  medicalRecord  MedicalRecord   @relation(fields: [medicalRecordId], references: [id])
  chronicDisease ChronicDiseases @relation(fields: [chronicDiseaseId], references: [id])

  @@id([medicalRecordId, chronicDiseaseId])
  @@map("medical_record_to_chronic_diseases")
}

model MedicalLogs {
  id            String  @id @default(uuid())
  bloodPressure String?
  heartRate     Int?
  mood          String?
  hydration     Int?
  bloodSugar    Int?

  selfMonitorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  selfMonitor SelfMonitor @relation(fields: [selfMonitorId], references: [id])

  diseases MedicalLogsToDiseases[]
  symptoms MedicalLogsToSymptoms[]

  @@map("medical_logs")
}

model Diseases {
  id          String  @id @default(uuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medicalLogs MedicalLogsToDiseases[]

  @@map("diseases")
}

model MedicalLogsToDiseases {
  medicalLogId String
  diseaseId    String

  medicalLog MedicalLogs @relation(fields: [medicalLogId], references: [id])
  disease    Diseases    @relation(fields: [diseaseId], references: [id])

  @@id([medicalLogId, diseaseId])
  @@map("medical_logs_to_diseases")
}

model Symptoms {
  id          String  @id @default(uuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medicalLogs MedicalLogsToSymptoms[]

  @@map("symptoms")
}

model MedicalLogsToSymptoms {
  medicalLogId String
  symptomId    String

  medicalLog MedicalLogs @relation(fields: [medicalLogId], references: [id])
  symptom    Symptoms    @relation(fields: [symptomId], references: [id])

  @@id([medicalLogId, symptomId])
  @@map("medical_logs_to_symptoms")
}

model MedicalReports {
  id      String     @id @default(uuid())
  fileKey String
  type    ReportType

  selfMonitorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  selfMonitor SelfMonitor @relation(fields: [selfMonitorId], references: [id])

  @@map("medical_reports")
}

model MedicineAlarms {
  id        String   @id @default(uuid())
  name      String
  weekDays  String[]
  times     String[]
  expiresAt DateTime

  selfMonitorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  selfMonitor SelfMonitor @relation(fields: [selfMonitorId], references: [id])

  @@map("medicine_alarms")
}

model AiChats {
  id       String @id @default(uuid())
  prompt   String
  response String

  selfMonitorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  selfMonitor SelfMonitor @relation(fields: [selfMonitorId], references: [id])

  @@map("ai_chats")
}

enum RowStatus {
  ACTIVED
  DELETED
}

enum UserTheme {
  DARK
  LIGHT
}

enum VerificationCodeType {
  EMAIL
  PASSWORD
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
}

enum CommunityNoteRating {
  YES
  NO
  SOMEWHAT
}

enum BloodType {
  A_MINUS  @map("a-")
  A_PLUS   @map("a+")
  B_MINUS  @map("b-")
  B_PLUS   @map("b+")
  AB_MINUS @map("ab-")
  AB_PLUS  @map("ab+")
  O_MINUS  @map("o-")
  O_PLUS   @map("o+")
}

enum LogInput {
  MOOD           @map("mood")
  SYPTOMS        @map("symptoms")
  IMC            @map("imc")
  HYDRATION      @map("hydration")
  BLOOD_PRESSURE @map("bloodPressure")
  BLOOD_SUGAR    @map("bloodSugar")
}

enum AllergyType {
  ANTIBIOTIC        @map("antibiotic")
  ANTI_INFLAMMATORY @map("anti-inflammatory")
  ANALGESIC         @map("analgesic")
  ANTICONVULSANT    @map("anticonvulsant")
}
